{"version":3,"sources":["webpack:///./node_modules/@babel/runtime/helpers/esm/asyncToGenerator.js","webpack:///./src/components/ValidatedInput.tsx","webpack:///./src/pages/index.tsx","webpack:///./src/pages/Index.module.scss"],"names":["asyncGeneratorStep","gen","resolve","reject","_next","_throw","key","arg","info","value","error","done","Promise","then","_asyncToGenerator","fn","self","this","args","arguments","apply","err","undefined","ValidatedInput","validate","useState","setValue","setError","isChecking","setIsChecking","useEffect","isChanged","onChange","useCallback","e","target","style","border","color","indexPageQuery","setTimeout","indexOf","IndexPage","render","props","data","site","siteMetadata","name","tagline","className","styles","React","module","exports"],"mappings":"0OAAA,SAASA,EAAmBC,EAAKC,EAASC,EAAQC,EAAOC,EAAQC,EAAKC,GACpE,IACE,IAAIC,EAAOP,EAAIK,GAAKC,GAChBE,EAAQD,EAAKC,MACjB,MAAOC,GAEP,YADAP,EAAOO,GAILF,EAAKG,KACPT,EAAQO,GAERG,QAAQV,QAAQO,GAAOI,KAAKT,EAAOC,GAIxB,SAASS,EAAkBC,GACxC,OAAO,WACL,IAAIC,EAAOC,KACPC,EAAOC,UACX,OAAO,IAAIP,SAAQ,SAAUV,EAASC,GACpC,IAAIF,EAAMc,EAAGK,MAAMJ,EAAME,GAEzB,SAASd,EAAMK,GACbT,EAAmBC,EAAKC,EAASC,EAAQC,EAAOC,EAAQ,OAAQI,GAGlE,SAASJ,EAAOgB,GACdrB,EAAmBC,EAAKC,EAASC,EAAQC,EAAOC,EAAQ,QAASgB,GAGnEjB,OAAMkB,OCvBL,SAASC,EAAT,GAAyE,IAA/CC,EAA+C,EAA/CA,SAA+C,EAClDC,mBAAwB,MAA3ChB,EADqE,KAC9DiB,EAD8D,OAElDD,mBAAwB,MAA3Cf,EAFqE,KAE9DiB,EAF8D,OAGxCF,oBAAS,GAAtCG,EAHqE,KAGzDC,EAHyD,KAK5EC,qBAAU,WACN,IAAIC,GAAY,EAYhB,OAXA,GAAC,YACG,GAAc,OAAVtB,EAAJ,CAGAoB,GAAc,GACd,IAAMnB,QAAcc,EAASf,GACxBsB,IACDF,GAAc,GACdF,EAASjB,OARjB,GAWO,WAAQqB,GAAY,KAC5B,CAACP,EAAUf,IAEd,IAAMuB,EAAWC,sBAAW,oBAAC,UAAOC,GAChCR,EAASQ,EAAEC,OAAO1B,UADM,sDAEzB,CAACe,EAAUf,IAEd,OACI,oCACI,2BACI2B,MAAO,CAAEC,QAAUT,GAAclB,EAAS,iBAAmB,0BAC7DD,MAAOA,GAAS,GAChBuB,SAAUA,IAEbJ,EACK,gDAAyBnB,EAAzB,QACAC,EACI,yBAAK0B,MAAO,CAAEE,MAAO,SAAW5B,GACtB,OAAVD,EACI,6CACA,MC9BnB,IAAM8B,EAAiB,aAW9B,SAASf,EAASf,GAChB,OAAO,IAAIG,SAAQ,SAAAV,GACfsC,YAAW,WACH/B,GAASA,EAAMgC,QAAQ,QAAU,GACjCvC,EAAQ,MAEZA,EAAQ,iCACT,Q,IAIYwC,E,kGAEZC,OAAP,WAAgB,MAIV1B,KAAK2B,MAAMC,KAAKC,KAAKC,aAFvBC,EAFY,EAEZA,KAFY,EAGZC,QAGF,OACE,gCACE,4BACE,8BACE,0BAAKD,IAGP,uBAAKE,UAAWC,aACd,2IACA,gBAAC5B,EAAD,CAAgBC,SAAUA,Q,GAjBC4B,c,qBCrCvCC,EAAOC,QAAU,CAAC,UAAY","file":"component---src-pages-index-tsx-6d409bae57fcc6682238.js","sourcesContent":["function asyncGeneratorStep(gen, resolve, reject, _next, _throw, key, arg) {\n  try {\n    var info = gen[key](arg);\n    var value = info.value;\n  } catch (error) {\n    reject(error);\n    return;\n  }\n\n  if (info.done) {\n    resolve(value);\n  } else {\n    Promise.resolve(value).then(_next, _throw);\n  }\n}\n\nexport default function _asyncToGenerator(fn) {\n  return function () {\n    var self = this,\n        args = arguments;\n    return new Promise(function (resolve, reject) {\n      var gen = fn.apply(self, args);\n\n      function _next(value) {\n        asyncGeneratorStep(gen, resolve, reject, _next, _throw, \"next\", value);\n      }\n\n      function _throw(err) {\n        asyncGeneratorStep(gen, resolve, reject, _next, _throw, \"throw\", err);\n      }\n\n      _next(undefined);\n    });\n  };\n}","import React, { useState, useEffect, useCallback } from 'react';\r\n\r\nexport type ValidateFunction = (value: string) => Promise<string | null>;\r\n\r\nexport interface IValidatedInputProps {\r\n    validate: ValidateFunction;\r\n}\r\n\r\nexport function ValidatedInput({ validate }: IValidatedInputProps): JSX.Element {\r\n    const [value, setValue] = useState<string | null>(null);\r\n    const [error, setError] = useState<string | null>(null);\r\n    const [isChecking, setIsChecking] = useState(false);\r\n\r\n    useEffect(() => {\r\n        let isChanged = false;\r\n        (async () => {\r\n            if (value === null) {\r\n                return;\r\n            }\r\n            setIsChecking(true);\r\n            const error = await validate(value);\r\n            if (!isChanged) {\r\n                setIsChecking(false);\r\n                setError(error);\r\n            }\r\n        })();\r\n        return () => { isChanged = true; };\r\n    }, [validate, value]);\r\n\r\n    const onChange = useCallback(async (e: React.ChangeEvent<HTMLInputElement>) => {\r\n        setValue(e.target.value);\r\n    }, [validate, value]);\r\n\r\n    return (\r\n        <>\r\n            <input\r\n                style={{ border: (!isChecking && error) ? '1px solid #f33' : '1px solid currentColor' }}\r\n                value={value || ''}\r\n                onChange={onChange}\r\n            />\r\n            {isChecking\r\n                ? <div>{`checking value \"${value}\"...`}</div>\r\n                : error\r\n                    ? <div style={{ color: '#f33' }}>{error}</div>\r\n                    : value !== null\r\n                        ? <div>You're good.</div>\r\n                        : null\r\n            }\r\n        </>\r\n    );\r\n}","import { graphql } from 'gatsby';\r\nimport * as React from 'react';\r\nimport * as styles from './Index.module.scss';\r\nimport { ValidatedInput } from '../components/ValidatedInput';\r\n\r\ninterface IndexPageProps {\r\n  data: {\r\n    site: {\r\n      siteMetadata: {\r\n        name: string;\r\n        tagline: string;\r\n      },\r\n    },\r\n  };\r\n}\r\n\r\nexport const indexPageQuery = graphql`\r\n  query IndexPageQuery {\r\n    site {\r\n      siteMetadata {\r\n        name\r\n        tagline\r\n      }\r\n    }\r\n  }\r\n`;\r\n\r\nfunction validate(value: string): Promise<string | null> {\r\n  return new Promise(resolve => {\r\n      setTimeout(() => {\r\n          if (value && value.indexOf('foo') >= 0) {\r\n              resolve(null);\r\n          }\r\n          resolve('Value does not contain foo.');\r\n      }, 1000);\r\n  });\r\n}\r\n\r\nexport default class IndexPage extends React.Component<IndexPageProps, {}> {\r\n\r\n  public render() {\r\n    const {\r\n      name,\r\n      tagline,\r\n    } = this.props.data.site.siteMetadata;\r\n\r\n    return (\r\n      <>\r\n        <main>\r\n          <header>\r\n            <h1>{name}</h1>\r\n            {/* <p>{tagline}</p> */}\r\n          </header>\r\n          <div className={styles.Container}>\r\n            <p>Enter a value. It will validate with a simulated API call, and determine if the value contains the text \"foo\".</p>\r\n            <ValidatedInput validate={validate} />\r\n          </div>\r\n        </main>\r\n      </>\r\n    );\r\n  }\r\n}\r\n\r\n","// extracted by mini-css-extract-plugin\nmodule.exports = {\"Container\":\"Index-module--Container--xn-23\"};"],"sourceRoot":""}